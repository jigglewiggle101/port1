<svg xmlns="http://www.w3.org/2000/svg" width="126.274" height="37.85" viewBox="0 0 126.274 37.85"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="Group_21" data-name="Group 21" transform="translate(-800.696 -14.446)">
    <path id="Path_30" data-name="Path 30" d="M820.587,14.446c.482.054.964.1,1.446.162a18.117,18.117,0,0,1,7.842,2.843,18.6,18.6,0,0,1,8.371,12.355,18.933,18.933,0,0,1-37.15,7.322A18.367,18.367,0,0,1,805.972,20.3a18.329,18.329,0,0,1,10.39-5.563c.726-.131,1.469-.169,2.2-.252a.6.6,0,0,0,.122-.041ZM815.749,28a38.4,38.4,0,0,1,8.005.659,23.054,23.054,0,0,1,7.093,2.552,1.955,1.955,0,0,0,.816.249,1.743,1.743,0,0,0,1.768-1.237,1.693,1.693,0,0,0-.784-2.006,29.433,29.433,0,0,0-2.86-1.41,34.271,34.271,0,0,0-12.535-2.329,35.343,35.343,0,0,0-4.919.271,26.377,26.377,0,0,0-4.5.92,1.756,1.756,0,0,0,.043,3.376,2.431,2.431,0,0,0,1.353-.119A26.944,26.944,0,0,1,815.749,28Zm.5,2.984c-.427.018-1.077.032-1.725.079a16.739,16.739,0,0,0-1.937.2q-1.843.352-3.667.8A1.444,1.444,0,0,0,807.86,33.6a1.5,1.5,0,0,0,1.944,1.251,22.223,22.223,0,0,1,6.4-.925,26.159,26.159,0,0,1,4.529.354,22.047,22.047,0,0,1,7.857,2.769,1.459,1.459,0,1,0,1.505-2.5c-.655-.38-1.317-.753-2-1.074A27.947,27.947,0,0,0,816.252,30.979Zm-7.606,8.173a1.177,1.177,0,0,0,1.518,1.125,27.8,27.8,0,0,1,8.627-.688,17.724,17.724,0,0,1,5.149,1.18c.948.389,1.856.878,2.765,1.354a1.178,1.178,0,0,0,1.772-.849,1.158,1.158,0,0,0-.622-1.191,20.513,20.513,0,0,0-10.27-2.906,27.538,27.538,0,0,0-3.731.149c-1.449.16-2.886.444-4.323.7A1.126,1.126,0,0,0,808.645,39.153Z" transform="translate(0 0)" fill="#2f3237"/>
    <path id="Path_31" data-name="Path 31" d="M1796.132,134.341a6,6,0,0,1-.277.749,2.071,2.071,0,0,1-3.879-1.229,2.092,2.092,0,0,1,2.045-1.838,2.062,2.062,0,0,1,2.057,1.686.862.862,0,0,0,.055.145Zm-.264-.251a1.781,1.781,0,0,0-1.828-1.827,1.845,1.845,0,0,0-.013,3.691A1.834,1.834,0,0,0,1795.868,134.091Z" transform="translate(-869.161 -103.095)" fill="#2f3237"/>
    <path id="Path_32" data-name="Path 32" d="M1630.141,96.445h.313c1.5,0,3,0,4.5,0a.377.377,0,0,1,.416.286q1.6,4.2,3.222,8.4c.034.09.071.178.131.331.338-.962.654-1.858.968-2.753q1.051-3,2.1-5.992a.336.336,0,0,1,.369-.272c.94.008,1.88,0,2.821,0,.316,0,.4.113.289.4-1.729,4.459-3.45,8.922-5.2,13.372a9.457,9.457,0,0,1-1.014,1.84,3.46,3.46,0,0,1-2.755,1.5,6.318,6.318,0,0,1-3.458-.7c-.3-.158-.329-.226-.191-.531q.435-.96.875-1.919c.122-.265.182-.26.464-.161a8.4,8.4,0,0,0,1.339.389,1.415,1.415,0,0,0,1.534-.825.777.777,0,0,0,.057-.775q-1.984-4.693-3.93-9.4a.354.354,0,0,0-.4-.261c-.795.012-1.59,0-2.436,0v.354q0,4.728,0,9.456c0,.432,0,.432-.44.432h-2.5c-.415,0-.433-.018-.433-.425q0-4.728,0-9.456v-.362c-.432,0-.844,0-1.257,0-.322,0-.358-.036-.359-.359q0-1.124,0-2.249c0-.294.069-.363.369-.366.4,0,.809,0,1.221,0,.026-.483.014-.945.084-1.4a6.716,6.716,0,0,1,.356-1.462,3.308,3.308,0,0,1,2.817-2.08,7.835,7.835,0,0,1,3.193.233.36.36,0,0,1,.313.417c-.014.731,0,1.463-.006,2.195,0,.325-.081.363-.4.3a10.333,10.333,0,0,0-1.594-.258,1.229,1.229,0,0,0-1.381,1.241C1630.119,95.863,1630.141,96.135,1630.141,96.445Z" transform="translate(-722.919 -67.473)" fill="#2f3237"/>
    <path id="Path_33" data-name="Path 33" d="M1276.986,141.96v.367q0,2.33,0,4.66c0,.351-.045.4-.386.4q-1.3,0-2.6,0c-.329,0-.379-.051-.379-.375q0-8.168,0-16.337c0-.32.041-.362.36-.363.886,0,1.772,0,2.658,0,.252,0,.363.087.354.348-.013.413,0,.828,0,1.293a1.9,1.9,0,0,0,.182-.153,5.46,5.46,0,0,1,6.738-1.053,6.12,6.12,0,0,1,3.2,4.46,7.992,7.992,0,0,1-.433,4.831,5.852,5.852,0,0,1-4.919,3.705,5.184,5.184,0,0,1-4.521-1.548C1277.169,142.125,1277.1,142.067,1276.986,141.96Zm3.394-1.166a3.1,3.1,0,0,0,2.816-1.517,4.356,4.356,0,0,0,.072-4.582,3.3,3.3,0,0,0-5.546-.315,4.362,4.362,0,0,0-.031,5.016A3.3,3.3,0,0,0,1280.38,140.793Z" transform="translate(-414.669 -101.349)" fill="#2f3237"/>
    <path id="Path_34" data-name="Path 34" d="M1161.292,96.789a9.4,9.4,0,0,1,6.035,2.019c.292.226.3.28.091.572l-1.379,1.944c-.224.315-.272.322-.581.1a7.913,7.913,0,0,0-3.218-1.48,4.105,4.105,0,0,0-2.674.24,1.651,1.651,0,0,0-.905,1.944,1.3,1.3,0,0,0,.736.923,18.816,18.816,0,0,0,1.986.768c1.046.334,2.116.594,3.159.937a7.32,7.32,0,0,1,1.385.669,4.139,4.139,0,0,1,2.145,3.734,4.929,4.929,0,0,1-1.348,3.657,5.556,5.556,0,0,1-3.156,1.61,10.484,10.484,0,0,1-8.846-2.473c-.272-.229-.271-.3-.039-.573q.776-.923,1.55-1.847c.234-.279.3-.285.569-.054a7.987,7.987,0,0,0,3.656,1.9,5.431,5.431,0,0,0,2.863-.093,1.781,1.781,0,0,0,1.26-2.227,1.531,1.531,0,0,0-.761-.91,9.349,9.349,0,0,0-2.255-.818c-1.09-.312-2.187-.611-3.256-.985a4.886,4.886,0,0,1-2.119-1.413,4.52,4.52,0,0,1-.975-3.524,5.048,5.048,0,0,1,4.221-4.469,6.9,6.9,0,0,1,.934-.15C1160.677,96.769,1160.985,96.789,1161.292,96.789Z" transform="translate(-310.238 -72.194)" fill="#2f3237"/>
    <path id="Path_35" data-name="Path 35" d="M1398.771,129.8a6.906,6.906,0,0,1,6.839,5.384,6.8,6.8,0,0,1-5.384,8.254,6.911,6.911,0,0,1-6.587-1.943,6.551,6.551,0,0,1-1.886-5.386,6.82,6.82,0,0,1,5.493-6.111C1397.747,129.9,1398.262,129.867,1398.771,129.8Zm3.639,6.97a4.147,4.147,0,0,0-.5-2.03,3.622,3.622,0,0,0-5.943-.621,4.105,4.105,0,0,0-.789,3.446,3.643,3.643,0,0,0,5.229,2.666A3.683,3.683,0,0,0,1402.411,136.773Z" transform="translate(-518.229 -101.148)" fill="#2f3237"/>
    <path id="Path_36" data-name="Path 36" d="M1509.093,110.271c-.454,0-.869-.009-1.282,0-.263.008-.351-.105-.348-.356q.012-1.124,0-2.249c0-.257.105-.357.358-.351.413.009.827,0,1.272,0V107q0-1.409,0-2.818c0-.319.046-.366.356-.366q1.329,0,2.658,0c.313,0,.353.043.354.366q0,1.4,0,2.791v.329c.111.006.206.017.3.017.922,0,1.844,0,2.767,0,.333,0,.373.043.373.379q0,1.1,0,2.195c0,.344-.031.375-.369.376-.931,0-1.863,0-2.794,0-.2,0-.285.034-.284.264.01,1.924,0,3.848.008,5.772a2.576,2.576,0,0,0,.048.484,1.1,1.1,0,0,0,1.183.9,3.719,3.719,0,0,0,1.707-.355c.326-.152.457-.073.459.28,0,.714.011,1.427-.009,2.14a.486.486,0,0,1-.212.356,5.527,5.527,0,0,1-4.485.326,2.94,2.94,0,0,1-1.948-2.464,7.289,7.289,0,0,1-.108-1.264c-.011-2.023,0-4.047,0-6.07Z" transform="translate(-619.711 -78.361)" fill="#2f3237"/>
    <path id="Path_37" data-name="Path 37" d="M1586.856,138.855q0-3.087,0-6.175c0-.384.032-.417.417-.418q1.3,0,2.6,0c.311,0,.361.052.361.366q0,6.229,0,12.458c0,.332-.039.369-.379.369q-1.315,0-2.63,0c-.342,0-.372-.03-.373-.372Q1586.856,141.969,1586.856,138.855Z" transform="translate(-689.325 -103.304)" fill="#2f3237"/>
    <path id="Path_38" data-name="Path 38" d="M1583.643,87.274a2.063,2.063,0,0,1,2.1-2.086,2.1,2.1,0,1,1,0,4.2A2.07,2.07,0,0,1,1583.643,87.274Z" transform="translate(-686.508 -62.028)" fill="#2f3237"/>
    <path id="Path_39" data-name="Path 39" d="M1802.206,141.746v-2.182c.38,0,.75-.021,1.115.006a.665.665,0,0,1,.657.508c.079.379-.034.6-.45.857.085.123.17.246.255.368s.177.247.268.375c-.33.127-.451.1-.627-.154a1.786,1.786,0,0,1-.168-.245.472.472,0,0,0-.625-.26v.706Zm.436-1.781v.655c.238-.014.454-.012.665-.043a.252.252,0,0,0,.235-.327.453.453,0,0,0-.269-.272A3,3,0,0,0,1802.642,139.965Z" transform="translate(-878.15 -109.7)" fill="#2f3237"/>
  </g>
</svg>