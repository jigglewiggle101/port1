<svg xmlns="http://www.w3.org/2000/svg" width="169.195" height="34.135" viewBox="0 0 169.195 34.135"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="Group_25" data-name="Group 25" transform="translate(-574.845 535.512)">
    <path id="Path_71" data-name="Path 71" d="M574.845-512.451h3.931l.172,1.559a11.624,11.624,0,0,1,8.984-2.138,10.875,10.875,0,0,1,7.531,5.32,11.022,11.022,0,0,1-1.836,13.436c-3.263,3.178-8.883,4.714-14.758.77,0,2.087-.017,4.017.007,5.946.013,1.038-.281,1.934-1.332,2.22a15.8,15.8,0,0,1-2.7.263Zm17.64,10.382a6.809,6.809,0,0,0-6.811-6.951,6.852,6.852,0,0,0-6.892,6.745,6.839,6.839,0,0,0,6.817,6.949A6.822,6.822,0,0,0,592.485-502.069Z" transform="translate(0 -16.302)" fill="#2f3237"/>
    <path id="Path_72" data-name="Path 72" d="M876.917-508.155h-3.873l-.236-1.555a11.394,11.394,0,0,1-9.788,1.9,10.838,10.838,0,0,1-6.123-4.278,10.99,10.99,0,0,1,.874-13.826c2.839-3.163,8.675-5.512,15.162-1.253,0-1.672,0-3.213,0-4.754,0-3.3.506-3.758,3.985-3.5Zm-3.88-10.25a6.851,6.851,0,0,0-6.749-6.893,6.831,6.831,0,0,0-6.962,6.8,6.827,6.827,0,0,0,6.87,6.891A6.851,6.851,0,0,0,873.038-518.405Z" transform="translate(-204.899 -0.026)" fill="#2f3237"/>
    <path id="Path_73" data-name="Path 73" d="M684.676-510.468l.167-1.377h3.953v20.522h-3.922l-.217-1.358c-7.146,3.176-12,2.489-15.623-2.18a10.987,10.987,0,0,1,.087-13.533C672.7-512.964,677.559-513.623,684.676-510.468Zm-13.462,8.842a6.818,6.818,0,0,0,6.732,6.9,6.853,6.853,0,0,0,6.984-6.8,6.874,6.874,0,0,0-6.751-6.9A6.819,6.819,0,0,0,671.213-501.626Z" transform="translate(-67.249 -16.899)" fill="#2f3237"/>
    <path id="Path_74" data-name="Path 74" d="M1104.383-510.852c.041-.565.073-1,.11-1.511h3.927v20.552h-3.926c-.035-.492-.067-.929-.111-1.544-3.3,2.223-6.787,2.978-10.559,1.692a10.692,10.692,0,0,1-5.6-4.349,11.1,11.1,0,0,1,1.137-13.612C1092.28-512.757,1098.043-515,1104.383-510.852Zm-6.754,15.613a6.9,6.9,0,0,0,6.957-6.841,6.9,6.9,0,0,0-6.809-6.856,6.964,6.964,0,0,0-6.981,6.842A6.958,6.958,0,0,0,1097.629-495.239Z" transform="translate(-374.34 -16.388)" fill="#2f3237"/>
    <path id="Path_75" data-name="Path 75" d="M948.423-502.252a11.063,11.063,0,0,1,11.1-11.037,11.068,11.068,0,0,1,10.97,11.311,11.076,11.076,0,0,1-11.041,10.838A11.061,11.061,0,0,1,948.423-502.252Zm11.109-6.551a6.663,6.663,0,0,0-6.736,6.548,6.664,6.664,0,0,0,6.652,6.63,6.638,6.638,0,0,0,6.658-6.613A6.643,6.643,0,0,0,959.532-508.8Z" transform="translate(-273.368 -16.261)" fill="#2f3237"/>
    <path id="Path_76" data-name="Path 76" d="M783.568-492.037H779.2v-3.178c0-2.235.01-4.469,0-6.7-.024-4.014-2.8-6.973-6.546-7-3.832-.031-6.629,2.758-6.719,6.814-.066,2.993-.005,5.988-.005,8.983,0,.31-.028.62-.048,1.034H761.5c0-3.439-.024-6.865.006-10.291a10.469,10.469,0,0,1,4.506-8.833,10.507,10.507,0,0,1,11.5-.956,10.393,10.393,0,0,1,6.041,9.687C783.6-499.049,783.568-495.612,783.568-492.037Z" transform="translate(-136.582 -16.143)" fill="#2f3237"/>
    <path id="Path_77" data-name="Path 77" d="M1045.773-491.454h-4.364c0-1.956-.026-3.862.007-5.767a46,46,0,0,1,.259-7.216c.936-5.255,5.632-8.6,11.137-8.178v4.157c-.677.122-1.37.217-2.049.374a5.879,5.879,0,0,0-4.984,6.2C1045.751-498.444,1045.773-495.008,1045.773-491.454Z" transform="translate(-341.404 -16.73)" fill="#2f3237"/>
    <path id="Path_78" data-name="Path 78" d="M1180.42-527.733a3.832,3.832,0,0,1-3.833-3.832,3.937,3.937,0,0,1,3.9-3.946,4.1,4.1,0,0,1,3.88,4.01A3.958,3.958,0,0,1,1180.42-527.733Zm.065-.512a3.386,3.386,0,0,0,3.341-3.429,3.411,3.411,0,0,0-3.354-3.3,3.358,3.358,0,0,0-3.381,3.381A3.3,3.3,0,0,0,1180.484-528.245Z" transform="translate(-440.328)" fill="#2f3237"/>
    <path id="Path_79" data-name="Path 79" d="M1188.229-526.337l.779,1.334-.236.213-2.065-2.191-.283,2.1-.275,0v-4.373c1,.081,2.25-.474,2.779.8.225.538-.227,1.358-.371,2.05Zm-1.581-2.685v2.011a11.91,11.91,0,0,0,1.721-.477.957.957,0,0,0,.038-.8A12.814,12.814,0,0,0,1186.647-529.022Z" transform="translate(-447.325 -4.536)" fill="#2f3237"/>
  </g>
</svg>