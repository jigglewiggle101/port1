<svg xmlns="http://www.w3.org/2000/svg" width="137.196" height="32.819" viewBox="0 0 137.196 32.819"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="Group_22" data-name="Group 22" transform="translate(-916.292 -418.057)">
    <path id="Path_40" data-name="Path 40" d="M1798.194,505.924c-.088.3-.189.587-.262.886a8.723,8.723,0,0,1-7.539,6.569,12.406,12.406,0,0,1-4.913-.335,8.847,8.847,0,0,1-6.128-5.765,14.625,14.625,0,0,1,.052-10.4,9.355,9.355,0,0,1,8.918-6.145,10.368,10.368,0,0,1,5.668,1.337,8.511,8.511,0,0,1,4.066,5.9,2.315,2.315,0,0,0,.137.365v.271c-1.265.069-2.531.118-3.793.218-.431.034-.58-.116-.7-.507a4.825,4.825,0,0,0-4.463-3.751,5.123,5.123,0,0,0-5.146,2.725,8.715,8.715,0,0,0-1.091,3.8,9.938,9.938,0,0,0,1.1,5.9,5.177,5.177,0,0,0,5.585,2.608,4.655,4.655,0,0,0,4.019-3.537c.055-.168.122-.332.2-.54h4.291Z" transform="translate(-744.706 -62.773)" fill="#2f3237"/>
    <path id="Path_41" data-name="Path 41" d="M1017.619,418.057a7.246,7.246,0,0,1-3.73,6.949,4.151,4.151,0,0,1-2.865.585,13.217,13.217,0,0,1,.3-2.259,7.119,7.119,0,0,1,5.256-5.149,1.01,1.01,0,0,0,.226-.126Z" transform="translate(-81.829)" fill="#2f3237"/>
    <path id="Path_42" data-name="Path 42" d="M941.777,478.894c-5.1,3.581-4.45,10.488.757,12.969-.068.239-.125.5-.214.742a19.06,19.06,0,0,1-3.426,5.882,5.137,5.137,0,0,1-2.7,1.841,3.953,3.953,0,0,1-2.772-.365,6.944,6.944,0,0,0-6.579-.011,3.984,3.984,0,0,1-5-1,20.179,20.179,0,0,1-5.23-10.375,13.2,13.2,0,0,1,.281-6.893,8.3,8.3,0,0,1,5.99-5.83,5.013,5.013,0,0,1,3.652.283,6.807,6.807,0,0,0,6.323.034,7,7,0,0,1,7.187,1.025A18.1,18.1,0,0,1,941.777,478.894Z" transform="translate(0 -49.709)" fill="#2f3237"/>
    <path id="Path_43" data-name="Path 43" d="M1177.672,434.92v30.148H1173.4V442.982l-.16-.053c-.094.2-.2.4-.28.609q-4.2,10.452-8.388,20.91c-.2.494-.408.725-.968.681a15,15,0,0,0-2.107,0,.814.814,0,0,1-.932-.634q-3.9-9.8-7.852-19.592a9.459,9.459,0,0,0-.957-1.92V465.11c-1.334,0-2.6.008-3.86-.015-.109,0-.255-.2-.308-.336a1.361,1.361,0,0,1-.015-.47q0-14.274,0-28.549v-.821h3.916a5.911,5.911,0,0,0,.815-.007c.469-.066.658.143.826.566q4.526,11.415,9.087,22.816c.082.205.174.406.331.77.163-.353.278-.573.369-.8q4.509-11.312,9-22.632a.941.941,0,0,1,1.067-.728C1174.52,434.954,1176.061,434.92,1177.672,434.92Z" transform="translate(-199.764 -14.55)" fill="#2f3237"/>
    <path id="Path_44" data-name="Path 44" d="M1415.5,494.326c1.378,0,2.666,0,3.954,0,.153,0,.306.035.568.067v22h-4.195v-3.629l-.129-.038a2.249,2.249,0,0,0-.2.282,6.609,6.609,0,0,1-5.909,3.7,10.536,10.536,0,0,1-3.282-.352,6.758,6.758,0,0,1-4.917-6.308c-.114-1.733-.117-3.476-.127-5.214-.019-3.232-.005-6.464-.005-9.7v-.773h4.489v.8c0,4.023-.006,8.046.006,12.069a10.561,10.561,0,0,0,.151,1.956,4.154,4.154,0,0,0,4.685,3.566,4.679,4.679,0,0,0,4.791-4.644c.153-2.636.1-5.284.121-7.926C1415.513,498.277,1415.5,496.359,1415.5,494.326Z" transform="translate(-418.906 -65.881)" fill="#2f3237"/>
    <path id="Path_45" data-name="Path 45" d="M1580.41,498.8h-4.038c-.04-.044-.084-.071-.094-.107a4.657,4.657,0,0,0-7.108-2.616,2.413,2.413,0,0,0,.148,4.358,28.037,28.037,0,0,0,4.077,1.212c1.152.324,2.33.57,3.458.962,2.055.713,3.564,1.993,3.852,4.284a5.977,5.977,0,0,1-2.507,5.928,10.739,10.739,0,0,1-7.494,1.779,9.488,9.488,0,0,1-5.071-1.729,6.755,6.755,0,0,1-2.723-5.107h4.445c.026.1.057.2.081.3a3.686,3.686,0,0,0,3.277,2.987,6.775,6.775,0,0,0,3.738-.323,2.614,2.614,0,0,0,1.8-2.184,2.271,2.271,0,0,0-1.742-2.7c-1.374-.441-2.807-.695-4.19-1.109a23.908,23.908,0,0,1-3.755-1.325c-3.9-1.927-3.838-7.313-.79-9.674s8.871-2.493,11.965-.186A6.586,6.586,0,0,1,1580.41,498.8Z" transform="translate(-558.546 -63.782)" fill="#2f3237"/>
    <path id="Path_46" data-name="Path 46" d="M1721.013,494.56h4.39v22.021h-4.39Z" transform="translate(-695.116 -66.083)" fill="#2f3237"/>
    <path id="Path_47" data-name="Path 47" d="M1723.346,435.339a2.636,2.636,0,0,1-2.651,2.686,2.683,2.683,0,0,1-2.659-2.632,2.635,2.635,0,0,1,2.674-2.661A2.575,2.575,0,0,1,1723.346,435.339Z" transform="translate(-692.544 -12.676)" fill="#2f3237"/>
  </g>
</svg>